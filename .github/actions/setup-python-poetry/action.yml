name: 'Setup Python and Poetry'
description: 'Sets up Python, Poetry, and handles dependency caching'

inputs:
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.13'
  working-directory:
    description: 'Directory containing poetry.lock and pyproject.toml'
    required: true
  cache-key-suffix:
    description: 'Additional string to append to cache keys for uniqueness'
    required: false
    default: ''

runs:
  using: composite
  steps:
    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Load cached Poetry installation
      id: cached-poetry
      uses: actions/cache@v4
      with:
        path: ~/.local
        key: poetry-0${{ inputs.cache-key-suffix }}

    - name: Install Poetry
      if: steps.cached-poetry.outputs.cache-hit != 'true'
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Configure poetry
      if: steps.cached-poetry.outputs.cache-hit == 'true'
      shell: bash
      run: poetry config virtualenvs.in-project true

    - name: Cache Poetry virtualenv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: ${{ inputs.working-directory }}/.venv
        # Cache based on CI runner OS version, Python version, lock file, and optional suffix
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles(format('{0}/poetry.lock', inputs.working-directory)) }}${{ inputs.cache-key-suffix }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: poetry install
